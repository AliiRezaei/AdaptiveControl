clc
clear
close all


%% Load Dataset

load simpleclass_dataset.mat
Inputs  = simpleclassInputs;
Targets = simpleclassTargets;

nInputs  = size(Inputs, 2);
nSamples = size(Inputs, 1);

%% Create and Train Network 

dimension = [4 1];
% top = hextop(dimension);

nNeurons = prod(dimension);
weights  = zeros(nNeurons, nSamples);
% neuronsCenterX = reshape(neuronsCenter(:, 1), dimension);
% neuronsCenterY = reshape(neuronsCenter(:, 2), dimension);

max_epoch = 10;

% distance between neuron i and j :
sigma0 = max(dimension) / numel(dimension);
sigma     = @(t) sigma0 * (1 - t / (max_epoch + 1));
distFunc  = @(ci, cj, t) exp(- (norm(ci - cj))^2 / (2 * sigma(t)^2));

% learning rate :
eta0 = 0.1;
eta = @(t) eta0 * (1 - t / (max_epoch + 1));

for epoch = 1:max_epoch
    for i = 1:nInputs
    
        winner_neurons = zeros(nNeurons, 1);
        for j = 1:nNeurons
            winner_neurons(j) = norm(Inputs(:, i)' - weights(j, :));
        end
    
        [~, i_star] = min(winner_neurons);
        [winner_neuron_x, winner_neuron_y] = ind2sub(dimension, i_star);
        winner_neuron_pos = [winner_neuron_x, winner_neuron_x];
    
        dist = zeros(nNeurons, 1);
        for j = 1:nNeurons
            neuron_j = weights(j, :);
            dist(j) = distFunc(winner_neuron_pos, neuron_j, epoch);
            % neuronsCenter(j, :) = neuronsCenter(j, :) + eta(epoch) * dist(j) * (Inputs(:, i)' - neuronsCenter(j, :));
        end
        
        %%%%%%%%%
        weights(i_star, :) = weights(i_star, :) + eta(epoch) * dist(i_star) * (Inputs(:, i)' - weights(i_star, :));
        %%%%%%%%%
        
    end
end

%% Plots and Results

% figure, plotsomtop(net)
% figure, plotsomnc(net)
% figure, plotsomnd(net)
% figure, plotsomplanes(net)
% figure, plotsomhits(net, inputs)
% figure, plotsompos(net, Inputs)

figure
scatter(Inputs(1, :), Inputs(2, :), 'filled');
hold on
plot(weights(:, 1), weights(:, 2), 'ro', 'MarkerSize', 10)

% % Solve a Clustering Problem with a Self-Organizing Map
% % Script generated by Neural Clustering app
% % Created 14-Aug-2024 03:57:32
% %
% % This script assumes these variables are defined:
% %
% %   irisInputs - input data.
% 
% load iris_dataset.mat
% 
% x = irisInputs;
% 
% % Create a Self-Organizing Map
% dimension = [10, 2];
% net = selforgmap(dimension);
% 
% % Choose Plot Functions
% % For a list of all plot functions type: help nnplot
% net.plotFcns = {'plotsomtop','plotsomnc','plotsomnd', ...
%     'plotsomplanes', 'plotsomhits', 'plotsompos'};
% 
% % Train the Network
% [net, tr] = train(net, x);
% 
% % Test the Network
% y = net(x);
% 
% % View the Network
% view(net)
% 
% %% Plots
% % Uncomment these lines to enable various plots.
% figure, plotsomtop(net)
% figure, plotsomnc(net)
% figure, plotsomnd(net)
% figure, plotsomplanes(net)
% figure, plotsomhits(net,x)
% figure, plotsompos(net,x)
% 
% %% Deployment
% 
% % % Change the (false) values to (true) to enable the following code blocks.
% % % See the help for each generation function for more information.
% % if (false)
% %     % Generate MATLAB function for neural network for application
% %     % deployment in MATLAB scripts or with MATLAB Compiler and Builder
% %     % tools, or simply to examine the calculations your trained neural
% %     % network performs.
% %     genFunction(net,'myNeuralNetworkFunction');
% %     y = myNeuralNetworkFunction(x);
% % end
% % if (false)
% %     % Generate a matrix-only MATLAB function for neural network code
% %     % generation with MATLAB Coder tools.
% %     genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
% %     y = myNeuralNetworkFunction(x);
% % end
% % if (false)
% %     % Generate a Simulink diagram for simulation or deployment with.
% %     % Simulink Coder tools.
% %     gensim(net);
% % end
